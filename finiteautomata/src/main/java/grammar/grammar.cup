// -*- Java -*- This Cup file was machine-generated by BNFC
package grammar;

parser code {:
  public grammar.Absyn.ModelRule pModelRule() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (grammar.Absyn.ModelRule) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal grammar.Absyn.ModelRule ModelRule;
nonterminal grammar.Absyn.AutomataRule AutomataRule;
nonterminal grammar.Absyn.AutomataInitRule AutomataInitRule;
nonterminal grammar.Absyn.AutomataTransitionRule AutomataTransitionRule;
nonterminal grammar.Absyn.AutomataAcceptingsRule AutomataAcceptingsRule;
nonterminal grammar.Absyn.StatementRule StatementRule;
nonterminal grammar.Absyn.CheckingStatementRule CheckingStatementRule;
nonterminal grammar.Absyn.ExportStatementRule ExportStatementRule;
nonterminal grammar.Absyn.AutomataExpressionRule AutomataExpressionRule;
nonterminal grammar.Absyn.Name Name;
nonterminal grammar.Absyn.ListAutomataRule ListAutomataRule;
nonterminal grammar.Absyn.ListAutomataTransitionRule ListAutomataTransitionRule;
nonterminal grammar.Absyn.ListStatementRule ListStatementRule;
nonterminal grammar.Absyn.ListName ListName;

terminal _SYMB_0;    //   {
terminal _SYMB_1;    //   }
terminal _SYMB_2;    //   :
terminal _SYMB_3;    //   ;
terminal _SYMB_4;    //   ,
terminal _SYMB_5;    //   ->
terminal _SYMB_6;    //   accepting
terminal _SYMB_7;    //   automata
terminal _SYMB_8;    //   check
terminal _SYMB_9;    //   dfa
terminal _SYMB_10;    //   empty
terminal _SYMB_11;    //   exportDot
terminal _SYMB_12;    //   exportText
terminal _SYMB_13;    //   init
terminal _SYMB_14;    //   subset
terminal _SYMB_15;    //   universal



terminal Integer _INTEGER_;

terminal String _IDENT_;



start with ModelRule;


ModelRule ::= ListAutomataRule:p_1 ListStatementRule:p_2  {: RESULT = new grammar.Absyn.Model(p_1,p_2); :} 
;
AutomataRule ::= _SYMB_7 _IDENT_:p_2 _SYMB_0 AutomataInitRule:p_4 ListAutomataTransitionRule:p_5 AutomataAcceptingsRule:p_6 _SYMB_1  {: RESULT = new grammar.Absyn.Automata(p_2,p_4,p_5,p_6); :} 
;
AutomataInitRule ::= _SYMB_13 _SYMB_2 Name:p_3 _SYMB_3  {: RESULT = new grammar.Absyn.AutomataInitialState(p_3); :} 
;
AutomataTransitionRule ::= Name:p_1 _SYMB_4 Name:p_3 _SYMB_5 Name:p_5  {: RESULT = new grammar.Absyn.AutomataTransition(p_1,p_3,p_5); :} 
  | Name:p_1 _SYMB_5 Name:p_3  {: RESULT = new grammar.Absyn.AutomataEmptyTransition(p_1,p_3); :}
;
AutomataAcceptingsRule ::= _SYMB_6 _SYMB_2 ListName:p_3 _SYMB_3  {: RESULT = new grammar.Absyn.AutomataAcceptings(p_3); :} 
;
StatementRule ::= CheckingStatementRule:p_1  {: RESULT = new grammar.Absyn.CheckingStatement(p_1); :} 
  | ExportStatementRule:p_1  {: RESULT = new grammar.Absyn.ActionStatement(p_1); :}
;
CheckingStatementRule ::= _SYMB_8 _IDENT_:p_2 _SYMB_10 _SYMB_3  {: RESULT = new grammar.Absyn.EmptyChecking(p_2); :} 
  | _SYMB_8 _IDENT_:p_2 _SYMB_15 _SYMB_3  {: RESULT = new grammar.Absyn.UniversalChecking(p_2); :}
  | _SYMB_8 _IDENT_:p_2 _SYMB_14 _IDENT_:p_4 _SYMB_3  {: RESULT = new grammar.Absyn.SubsetChecking(p_2,p_4); :}
;
ExportStatementRule ::= _SYMB_11 AutomataExpressionRule:p_2 _SYMB_3  {: RESULT = new grammar.Absyn.ExportDotStatement(p_2); :} 
  | _SYMB_12 AutomataExpressionRule:p_2 _SYMB_3  {: RESULT = new grammar.Absyn.ExportTextStatement(p_2); :}
;
AutomataExpressionRule ::= _SYMB_9 _IDENT_:p_2  {: RESULT = new grammar.Absyn.DFAAutomata(p_2); :} 
  | _IDENT_:p_1  {: RESULT = new grammar.Absyn.NameAutomata(p_1); :}
;
Name ::= _INTEGER_:p_1  {: RESULT = new grammar.Absyn.NumberName(p_1); :} 
  | _IDENT_:p_1  {: RESULT = new grammar.Absyn.LiteralName(p_1); :}
;
ListAutomataRule ::=  /* empty */  {: RESULT = new grammar.Absyn.ListAutomataRule(); :} 
  | ListAutomataRule:p_1 AutomataRule:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
ListAutomataTransitionRule ::=  /* empty */  {: RESULT = new grammar.Absyn.ListAutomataTransitionRule(); :} 
  | AutomataTransitionRule:p_1  {: RESULT = new grammar.Absyn.ListAutomataTransitionRule(); RESULT.addLast(p_1); :}
  | AutomataTransitionRule:p_1 _SYMB_3 ListAutomataTransitionRule:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListStatementRule ::=  /* empty */  {: RESULT = new grammar.Absyn.ListStatementRule(); :} 
  | ListStatementRule:p_1 StatementRule:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
ListName ::=  /* empty */  {: RESULT = new grammar.Absyn.ListName(); :} 
  | Name:p_1  {: RESULT = new grammar.Absyn.ListName(); RESULT.addLast(p_1); :}
  | Name:p_1 _SYMB_4 ListName:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;

