
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jun 04 22:16:29 SGT 2015
//----------------------------------------------------

package grammar;


/** CUP v0.10k generated parser.
  * @version Thu Jun 04 22:16:29 SGT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\003\004\000\002\004" +
    "\011\000\002\005\006\000\002\006\007\000\002\006\005" +
    "\000\002\007\006\000\002\010\003\000\002\010\003\000" +
    "\002\011\006\000\002\011\006\000\002\011\007\000\002" +
    "\012\005\000\002\012\005\000\002\013\004\000\002\013" +
    "\003\000\002\014\003\000\002\014\003\000\002\015\002" +
    "\000\002\015\004\000\002\016\002\000\002\016\003\000" +
    "\002\016\005\000\002\017\002\000\002\017\004\000\002" +
    "\020\002\000\002\020\003\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\014\002\uffef\013\uffef\014\uffef\017\uffef\020" +
    "\uffef\001\002\000\014\002\uffea\013\011\014\uffea\017\uffea" +
    "\020\uffea\001\002\000\004\002\006\001\002\000\004\002" +
    "\001\001\002\000\012\002\000\014\051\017\054\020\053" +
    "\001\002\000\014\002\uffee\013\uffee\014\uffee\017\uffee\020" +
    "\uffee\001\002\000\004\025\012\001\002\000\004\004\013" +
    "\001\002\000\004\021\014\001\002\000\004\006\044\001" +
    "\002\000\010\012\uffed\024\021\025\020\001\002\000\006" +
    "\010\036\011\037\001\002\000\006\007\034\012\uffec\001" +
    "\002\000\012\007\ufff0\010\ufff0\011\ufff0\012\ufff0\001\002" +
    "\000\012\007\ufff1\010\ufff1\011\ufff1\012\ufff1\001\002\000" +
    "\004\012\023\001\002\000\004\006\026\001\002\000\004" +
    "\005\025\001\002\000\014\002\uffff\013\uffff\014\uffff\017" +
    "\uffff\020\uffff\001\002\000\010\007\uffe8\024\021\025\020" +
    "\001\002\000\006\007\uffe7\010\032\001\002\000\004\007" +
    "\031\001\002\000\004\005\ufffb\001\002\000\010\007\uffe8" +
    "\024\021\025\020\001\002\000\004\007\uffe6\001\002\000" +
    "\010\012\uffed\024\021\025\020\001\002\000\004\012\uffeb" +
    "\001\002\000\006\024\021\025\020\001\002\000\006\024" +
    "\021\025\020\001\002\000\006\007\ufffc\012\ufffc\001\002" +
    "\000\004\011\042\001\002\000\006\024\021\025\020\001" +
    "\002\000\006\007\ufffd\012\ufffd\001\002\000\006\024\021" +
    "\025\020\001\002\000\004\007\046\001\002\000\010\012" +
    "\ufffe\024\ufffe\025\ufffe\001\002\000\012\002\uffe9\014\uffe9" +
    "\017\uffe9\020\uffe9\001\002\000\012\002\ufff9\014\ufff9\017" +
    "\ufff9\020\ufff9\001\002\000\004\025\064\001\002\000\012" +
    "\002\ufffa\014\ufffa\017\ufffa\020\ufffa\001\002\000\006\015" +
    "\056\025\055\001\002\000\006\015\056\025\055\001\002" +
    "\000\004\007\ufff2\001\002\000\004\025\061\001\002\000" +
    "\004\007\060\001\002\000\012\002\ufff5\014\ufff5\017\ufff5" +
    "\020\ufff5\001\002\000\004\007\ufff3\001\002\000\004\007" +
    "\063\001\002\000\012\002\ufff4\014\ufff4\017\ufff4\020\ufff4" +
    "\001\002\000\010\016\065\022\067\023\066\001\002\000" +
    "\004\007\073\001\002\000\004\007\072\001\002\000\004" +
    "\025\070\001\002\000\004\007\071\001\002\000\012\002" +
    "\ufff6\014\ufff6\017\ufff6\020\ufff6\001\002\000\012\002\ufff7" +
    "\014\ufff7\017\ufff7\020\ufff7\001\002\000\012\002\ufff8\014" +
    "\ufff8\017\ufff8\020\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\006\003\004\015\003\001\001\000\006\004" +
    "\007\017\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\046\011\051\012\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\014" +
    "\001\001\000\002\001\001\000\010\006\016\014\015\016" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\026\020\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\026\020\032\001\001" +
    "\000\002\001\001\000\010\006\016\014\015\016\034\001" +
    "\001\000\002\001\001\000\004\014\040\001\001\000\004" +
    "\014\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\042\001\001\000\002\001\001\000\004\014\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\061\001\001\000\004\013\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public grammar.Absyn.ModelRule pModelRule() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (grammar.Absyn.ModelRule) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListName ::= Name _SYMB_4 ListName 
            {
              grammar.Absyn.ListName RESULT = null;
		grammar.Absyn.Name p_1 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.ListName p_3 = (grammar.Absyn.ListName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*ListName*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListName ::= Name 
            {
              grammar.Absyn.ListName RESULT = null;
		grammar.Absyn.Name p_1 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.ListName(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*ListName*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ListName ::= 
            {
              grammar.Absyn.ListName RESULT = null;
		 RESULT = new grammar.Absyn.ListName(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*ListName*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ListStatementRule ::= ListStatementRule StatementRule 
            {
              grammar.Absyn.ListStatementRule RESULT = null;
		grammar.Absyn.ListStatementRule p_1 = (grammar.Absyn.ListStatementRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		grammar.Absyn.StatementRule p_2 = (grammar.Absyn.StatementRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*ListStatementRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ListStatementRule ::= 
            {
              grammar.Absyn.ListStatementRule RESULT = null;
		 RESULT = new grammar.Absyn.ListStatementRule(); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*ListStatementRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ListAutomataTransitionRule ::= AutomataTransitionRule _SYMB_3 ListAutomataTransitionRule 
            {
              grammar.Absyn.ListAutomataTransitionRule RESULT = null;
		grammar.Absyn.AutomataTransitionRule p_1 = (grammar.Absyn.AutomataTransitionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.ListAutomataTransitionRule p_3 = (grammar.Absyn.ListAutomataTransitionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*ListAutomataTransitionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ListAutomataTransitionRule ::= AutomataTransitionRule 
            {
              grammar.Absyn.ListAutomataTransitionRule RESULT = null;
		grammar.Absyn.AutomataTransitionRule p_1 = (grammar.Absyn.AutomataTransitionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.ListAutomataTransitionRule(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*ListAutomataTransitionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ListAutomataTransitionRule ::= 
            {
              grammar.Absyn.ListAutomataTransitionRule RESULT = null;
		 RESULT = new grammar.Absyn.ListAutomataTransitionRule(); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*ListAutomataTransitionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListAutomataRule ::= ListAutomataRule AutomataRule 
            {
              grammar.Absyn.ListAutomataRule RESULT = null;
		grammar.Absyn.ListAutomataRule p_1 = (grammar.Absyn.ListAutomataRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		grammar.Absyn.AutomataRule p_2 = (grammar.Absyn.AutomataRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*ListAutomataRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ListAutomataRule ::= 
            {
              grammar.Absyn.ListAutomataRule RESULT = null;
		 RESULT = new grammar.Absyn.ListAutomataRule(); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*ListAutomataRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Name ::= _IDENT_ 
            {
              grammar.Absyn.Name RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.LiteralName(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Name*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Name ::= _INTEGER_ 
            {
              grammar.Absyn.Name RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.NumberName(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Name*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // AutomataExpressionRule ::= _IDENT_ 
            {
              grammar.Absyn.AutomataExpressionRule RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.NameAutomata(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*AutomataExpressionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AutomataExpressionRule ::= _SYMB_9 _IDENT_ 
            {
              grammar.Absyn.AutomataExpressionRule RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.DFAAutomata(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*AutomataExpressionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ExportStatementRule ::= _SYMB_12 AutomataExpressionRule _SYMB_3 
            {
              grammar.Absyn.ExportStatementRule RESULT = null;
		grammar.Absyn.AutomataExpressionRule p_2 = (grammar.Absyn.AutomataExpressionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.ExportTextStatement(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*ExportStatementRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ExportStatementRule ::= _SYMB_11 AutomataExpressionRule _SYMB_3 
            {
              grammar.Absyn.ExportStatementRule RESULT = null;
		grammar.Absyn.AutomataExpressionRule p_2 = (grammar.Absyn.AutomataExpressionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.ExportDotStatement(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*ExportStatementRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CheckingStatementRule ::= _SYMB_8 _IDENT_ _SYMB_14 _IDENT_ _SYMB_3 
            {
              grammar.Absyn.CheckingStatementRule RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.SubsetChecking(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*CheckingStatementRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CheckingStatementRule ::= _SYMB_8 _IDENT_ _SYMB_15 _SYMB_3 
            {
              grammar.Absyn.CheckingStatementRule RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new grammar.Absyn.UniversalChecking(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*CheckingStatementRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CheckingStatementRule ::= _SYMB_8 _IDENT_ _SYMB_10 _SYMB_3 
            {
              grammar.Absyn.CheckingStatementRule RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new grammar.Absyn.EmptyChecking(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*CheckingStatementRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // StatementRule ::= ExportStatementRule 
            {
              grammar.Absyn.StatementRule RESULT = null;
		grammar.Absyn.ExportStatementRule p_1 = (grammar.Absyn.ExportStatementRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.ActionStatement(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*StatementRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // StatementRule ::= CheckingStatementRule 
            {
              grammar.Absyn.StatementRule RESULT = null;
		grammar.Absyn.CheckingStatementRule p_1 = (grammar.Absyn.CheckingStatementRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.CheckingStatement(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*StatementRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // AutomataAcceptingsRule ::= _SYMB_6 _SYMB_2 ListName _SYMB_3 
            {
              grammar.Absyn.AutomataAcceptingsRule RESULT = null;
		grammar.Absyn.ListName p_3 = (grammar.Absyn.ListName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.AutomataAcceptings(p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*AutomataAcceptingsRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // AutomataTransitionRule ::= Name _SYMB_5 Name 
            {
              grammar.Absyn.AutomataTransitionRule RESULT = null;
		grammar.Absyn.Name p_1 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.Name p_3 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.AutomataEmptyTransition(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*AutomataTransitionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // AutomataTransitionRule ::= Name _SYMB_4 Name _SYMB_5 Name 
            {
              grammar.Absyn.AutomataTransitionRule RESULT = null;
		grammar.Absyn.Name p_1 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		grammar.Absyn.Name p_3 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.Name p_5 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.AutomataTransition(p_1,p_3,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*AutomataTransitionRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // AutomataInitRule ::= _SYMB_13 _SYMB_2 Name _SYMB_3 
            {
              grammar.Absyn.AutomataInitRule RESULT = null;
		grammar.Absyn.Name p_3 = (grammar.Absyn.Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.AutomataInitialState(p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*AutomataInitRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // AutomataRule ::= _SYMB_7 _IDENT_ _SYMB_0 AutomataInitRule ListAutomataTransitionRule AutomataAcceptingsRule _SYMB_1 
            {
              grammar.Absyn.AutomataRule RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		grammar.Absyn.AutomataInitRule p_4 = (grammar.Absyn.AutomataInitRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		grammar.Absyn.ListAutomataTransitionRule p_5 = (grammar.Absyn.ListAutomataTransitionRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		grammar.Absyn.AutomataAcceptingsRule p_6 = (grammar.Absyn.AutomataAcceptingsRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new grammar.Absyn.Automata(p_2,p_4,p_5,p_6); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*AutomataRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ModelRule ::= ListAutomataRule ListStatementRule 
            {
              grammar.Absyn.ModelRule RESULT = null;
		grammar.Absyn.ListAutomataRule p_1 = (grammar.Absyn.ListAutomataRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		grammar.Absyn.ListStatementRule p_2 = (grammar.Absyn.ListStatementRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new grammar.Absyn.Model(p_1,p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*ModelRule*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ModelRule EOF 
            {
              Object RESULT = null;
		grammar.Absyn.ModelRule start_val = (grammar.Absyn.ModelRule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

